=================================
Secure your server
=================================

#begin in root, create sudo user
passwd
apt -y update
apt -y upgrade
adduser selkadmin
usermod -aG sudo selkadmin
su - selkadmin
mkdir .ssh
cat > .ssh/authorized_keys
#paste authorized-key here
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
sudo chmod -x /etc/update-motd.d/*
sudo chmod +x /etc/update-motd.d/50-landscape-sysinfo 
sudo chmod +x /etc/update-motd.d/90-updates-available 
sudo chmod +x /etc/update-motd.d/00-header 
sudo nano /etc/motd
================================================================
Welcome to the Ubuntu server single-node Secure Elk Stack
================================================================
All access to this server (and each server in this network) is
meticulously logged and monitored. Please be careful...
================================================================
sudo apt -y install ufw net-tools
sudo ufw allow in OpenSSH
sudo nano /etc/default/ufw
IPV6=no
sudo ufw enable
#y
sudo ufw status
sudo nano /etc/ssh/sshd_config
# For internal servers we first disable all authentication, then 
# allow only PasswordAuthentication from the jumpbox IP using 
# the 'Match Address' line below
Include /etc/ssh/sshd_config.d/*.conf
PubkeyAuthentication no
PasswordAuthentication no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding no
PrintMotd no
PermitRootLogin without-password
#Banner none
# Allow client to pass locale environment variables
AcceptEnv LANG LC_*
# override default of no subsystems to allow SFTP
#Subsystem sftp /usr/lib/openssh/sftp-server
# Allow password-only access from a single IP, the jump server
# which itself is accessible only via pubkey. Note that Digital
# Ocean will default this to "no" when it takes a snapshot, which
# is a good default for external IP addresses
Match Address 10.0.0.10
    PasswordAuthentication yes
# Allow access for root with Pubkey, but only from Digital Ocean
# internal web console servers
# Note: This is not perfect, because anyone with 162.243
# subnet AND key could get in, if you prefer more secure leave it out
# and only use the emergency console. Note also these IPs are guessed,
# as Digital Ocean would not provide a canonical list.
Match User root Address 162.243.*.*
    PubkeyAuthentication yes
#conclude your root session
exit
ip a
#capture your ip addresses for /etc/hosts file
sudo nano /etc/hosts
127.0.0.1 localhost
127.0.1.1 selk
10.0.0.11 selk.local
137.184.85.7 selk.mydomain.com
sudo shutdown -h -r now


=================================
Add 4G of Swap:
=================================

sudo fallocate -l 4G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
sudo nano /etc/fstab
/swapfile swap swap defaults 0 0
sudo swapon --show
sudo free -h
cat /proc/sys/vm/swappiness

sudo shutdown -h now

=================================
=======BASE SYSTEM IS DONE=======
=================================

=================================
This is a good time to take a snapshot, if you're working with a VM.
Hereafter, you will login from jump server with 'selkadmin'
=================================

=================================
Install Nginx:
=================================

sudo apt -y install nginx certbot python3-certbot-nginx unzip
sudo nano /etc/nginx/sites-available/selk.conf
server {
    listen 80;

    server_name selk.mydomain.com;

    location / {
        proxy_pass http://selk.local:5601;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
sudo ln -s /etc/nginx/sites-available/selk.conf /etc/nginx/sites-enabled/selk.conf
sudo ufw allow in 'Nginx Full'
sudo ufw status
# if you're doing this repeatedly, here is where you can upload the letsencrypt folder
# instead of running the certbot command over and over, i.e. being nice to letsencrypt servers
#-cd /etc/
#-sudo tar -xzvf letsencrypt.tar.gz 
#-sudo rm letsencrypt.tar.gz 
sudo nginx -t
sudo systemctl reload nginx
sudo certbot --nginx -d selk.mydomain.com
#select 'redirect' option
sudo nano /etc/nginx/sites-available/selk.conf 
server {

    listen 80;

    if ($host = selk.mydomain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    server_name selk.mydomain.com;
    return 404; # managed by Certbot

}
server {

    listen 443 ssl; # managed by Certbot

    server_name selk.mydomain.com;

    #auth_basic "Restricted Access";
    #auth_basic_user_file /etc/nginx/htpasswd.users;

    location / {
        #proxy_pass https://selk.local:5601;
        proxy_pass http://selk.local:5601;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    ssl_certificate /etc/letsencrypt/live/selk.mydomain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/selk.mydomain.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {

    listen 9201 ssl;

    server_name selk.mydomain.com;

    location / {
        proxy_pass https://selk.local:9200;
        proxy_redirect off;
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Connection 'Keep-Alive';
        proxy_set_header Proxy-Connection 'Keep-Alive';
    }

    ssl_certificate /etc/letsencrypt/live/selk.mydomain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/selk.mydomain.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
sudo systemctl reload nginx


=================================
Install Elasticsearch:
=================================

curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list
sudo apt -y update
sudo apt install elasticsearch
echo -e "-Xms512m\n-Xmx512m" | sudo tee -a /etc/elasticsearch/jvm.options.d/memfix
sudo mkdir /etc/systemd/system/elasticsearch.service.d
echo -e "[Service]\nTimeoutStartSec=180" | sudo tee /etc/systemd/system/elasticsearch.service.d/startup-timeout.conf
sudo systemctl daemon-reload
sudo systemctl enable elasticsearch


=================================
Prepare/Install Certificates
=================================

sudo mkdir -p /etc/elasticsearch/certs
sudo mkdir -p /etc/kibana/certs
sudo mkdir -p /etc/logstash/certs
sudo mkdir -p /etc/filebeat/certs
sudo cp /etc/letsencrypt/live/selk.mydomain.com/fullchain.pem /etc/kibana/certs/fullchain.pem
sudo cp /etc/letsencrypt/live/selk.mydomain.com/fullchain.pem /etc/filebeat/certs/fullchain.pem
sudo cp /etc/letsencrypt/live/selk.mydomain.com/privkey.pem /etc/kibana/certs/privkey.pem
sudo cp /etc/letsencrypt/live/selk.mydomain.com/privkey.pem /etc/filebeat/certs/privkey.pem
sudo cp /etc/letsencrypt/live/selk.mydomain.com/cert.pem /etc/kibana/certs/cert.pem
sudo cp /etc/letsencrypt/live/selk.mydomain.com/cert.pem /etc/filebeat/certs/cert.pem
sudo /usr/share/elasticsearch/bin/elasticsearch-certutil cert --keep-ca-key -pem --out /etc/elasticsearch/certs/certs.zip -name selk -ip 10.0.0.11 -dns selk.local
sudo unzip /etc/elasticsearch/certs/certs.zip -d /etc/elasticsearch/certs
sudo cp -r /etc/elasticsearch/certs/ca /etc/kibana/certs/
sudo cp -r /etc/elasticsearch/certs/ca /etc/logstash/certs/
sudo cp -r /etc/elasticsearch/certs/ca /etc/filebeat/certs/
sudo cp -r /etc/elasticsearch/certs/selk /etc/kibana/certs/
sudo cp -r /etc/elasticsearch/certs/selk /etc/logstash/certs/
sudo cp -r /etc/elasticsearch/certs/selk /etc/filebeat/certs/
sudo chmod -R 755 /etc/elasticsearch/certs
sudo chown -R root:elasticsearch /etc/elasticsearch/certs


=================================
Update Elasticsearch with Certs:
=================================

sudo nano /etc/elasticsearch/elasticsearch.yml
discovery.type: single-node
network.host: selk.local
xpack.security.enabled: true
xpack.security.http.ssl.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.http.ssl.key: certs/selk/selk.key
xpack.security.http.ssl.certificate: certs/selk/selk.crt
xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt
xpack.security.http.ssl.verification_mode: certificate
xpack.security.transport.ssl.key: certs/selk/selk.key
xpack.security.transport.ssl.certificate: certs/selk/selk.crt
xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
xpack.security.transport.ssl.verification_mode: certificate
xpack.monitoring.collection.enabled: true
sudo service elasticsearch start &
#give elastic 20-30 seconds to get running if needed
sudo service elasticsearch status
sudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto
#y
#store the passwords in a safe place, or copy them here and store this file in a safe place
curl -XGET 'https://selk.local:9200' --cacert /etc/filebeat/certs/ca/ca.crt --user elastic
#enter the elastic password which was just generated to console by setup-passwords command

=================================
Install Kibana & Generate Keys & Passwords:
=================================

sudo apt install kibana
sudo chmod -R 755 /etc/kibana/certs
sudo chown -R root:kibana /etc/kibana/certs
sudo /usr/share/kibana/bin/kibana-encryption-keys generate
#copy/paste the 3 encryption keys into the following contents for kibana.yml
sudo nano /etc/kibana/kibana.yml
server.name: "selk"
server.host: "selk.local"
server.publicBaseUrl: "https://selk.mydomain.com"
elasticsearch.hosts: ["https://selk.local:9200"]
elasticsearch.username: "kibana_system"
elasticsearch.ssl.certificateAuthorities: [ "/etc/kibana/certs/ca/ca.crt" ]
xpack.encryptedSavedObjects.encryptionKey: d165e1ce612e461ea775dd67ee11aee6
xpack.reporting.encryptionKey: 41c552cc0ec8747298978f39faf61ae5
xpack.security.encryptionKey: b7ae1371442e8343f9d962e70ab63b16
# this used to work, alas, now we need to disable it in UI under 
# advanced settings. leaving this here as reminder
#newsfeed.enabled: false
telemetry.optIn: false
telemetry.enabled: false
sudo /usr/share/kibana/bin/kibana-keystore add elasticsearch.password
#add "kibana_system" password just created via elasticsearch-setup-passwords
sudo systemctl start kibana
sudo systemctl enable kibana
sudo service kibana status
#browse to http://selk.mydomain.com/status
#enter elastic password just created via elasticsearch-setup-passwords
#if status is red, wait a minute or two and try again


=================================
Install Logstash:
=================================

sudo apt -y install logstash
#see https://discuss.elastic.co/t/pipelines-yml-ignored-on-logstash-running-as-a-service/107828/15
sudo sed -i 's/ "--path.settings" "\/etc\/logstash"//g' /etc/systemd/system/logstash.service
sudo systemctl daemon-reload
sudo chmod -R 755 /etc/logstash/certs
sudo chown -R root:logstash /etc/logstash/certs
sudo nano /etc/logstash/pipelines.yml
# This file is where you define your pipelines. You can define multiple.
# For more information on multiple pipelines, see the documentation:
# https://www.elastic.co/guide/en/logstash/current/multiple-pipelines.html
- pipeline.id: main
  path.config: "/etc/logstash/conf.d/*.conf"
- pipeline.id: syslog
  path.config: "/etc/logstash/conf.d/syslog.cfg"
sudo nano /etc/logstash/conf.d/02-beats-input.conf
input {
  beats {
    port => 5044
    ssl => true
    ssl_key => '/etc/filebeat/certs/privkey.pem'
    ssl_certificate => '/etc/filebeat/certs/fullchain.pem'
  }
}
sudo nano /etc/logstash/conf.d/30-elasticsearch-output.conf
output {
  if [@metadata][pipeline] {
    elasticsearch {
      hosts => ["https://selk.local:9200"]
      manage_template => false
      index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
      pipeline => "%{[@metadata][pipeline]}"
      cacert => '/etc/logstash/certs/ca/ca.crt'
      user => 'logstash_writer'
      password => 'bJqU9H6UT4'
    }
  } else {
    elasticsearch {
      hosts => ["https://selk.local:9200"]
      manage_template => false
      index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
      cacert => '/etc/logstash/certs/ca/ca.crt'
      user => 'logstash_writer'
      password => 'bJqU9H6UT4'
    }
  }
}
sudo nano /etc/logstash/conf.d/syslog.cfg
input {
    syslog {
        host => "127.0.0.1"
        port => "10514"
    }
}
output {
    elasticsearch {
        hosts => ["https://selk.local:9200"]
        manage_template => false
        index => "syslog-%{+YYYY.MM.dd}"
        cacert => '/etc/logstash/certs/ca/ca.crt'
        user => 'logstash_writer'
        password => 'bJqU9H6UT4'
    }
}
sudo apt install iptables-persistent
#Y
#for this next command, you need to use external NIC name if it is not already eth0
sudo sysctl -w net.ipv4.conf.eth0.route_localnet=1
sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 514 -j DNAT --to-destination 127.0.0.1:10514
sudo iptables-save
sudo iptables-save | sudo tee /etc/iptables/rules.v4
sudo ufw allow in 514
echo -e "\n#Explicitly prefer IPv4\n-Djava.net.preferIPv4Stack=true\n-Djava.net.preferIPv6Addresses=false" | sudo tee -a /etc/logstash/jvm.options
#below, disable user history while storing logstash_system password in logstash keystore
#before doing so, copy/paste the logstash_system password which was just created above via elasticsearch-setup-passwords
set +o history
export LOGSTASH_KEYSTORE_PASS=m9n7LnxFY2nrDDKs
echo "LOGSTASH_KEYSTORE_PASS=m9n7LnxFY2nrDDKs" | sudo tee -a ~/.profile
set -o history
sudo -E /usr/share/logstash/bin/logstash-keystore --path.settings /etc/logstash create
sudo -E /usr/share/logstash/bin/logstash-keystore --path.settings /etc/logstash add logstash_system_password
#add "logstash_system" password from elasticsearch-setup-passwords
sudo nano /etc/logstash/logstash.yml
node.name: selk.local
path.config: /etc/logstash/conf.d/*.conf
xpack.monitoring.enabled: true
xpack.monitoring.elasticsearch.username: logstash_system
xpack.monitoring.elasticsearch.password: ${logstash_system_password}
xpack.monitoring.elasticsearch.hosts: [ 'https://selk.local:9200' ]
xpack.monitoring.elasticsearch.ssl.certificate_authority: /etc/logstash/certs/ca/ca.crt
curl -XPOST "https://selk.local:9200/_security/role/logstash_write_role"  -H 'Content-Type: application/json' -d'{ "cluster": [ "manage_index_templates", "monitor", "manage_ilm" ], "indices": [ { "names": [ "logstash*", "filebeat*" ], "privileges": [ "create", "write", "delete", "manage", "create_index", "manage_ilm" ] } ] }' --cacert "/etc/logstash/certs/ca/ca.crt" --user elastic
curl -XPOST "https://selk.local:9200/_security/user/logstash_writer" -H 'Content-Type: application/json' -d'{  "password" : "bJqU9H6UT4",  "enabled": true,  "roles" : [ "logstash_write_role" ] }' --cacert "/etc/logstash/certs/ca/ca.crt" --user elastic

#or, if you don't want to use command lines above, go to Stack Management, Roles, and Create Role:
#in web UI (https://selk.mydomain.com/app/management/security/roles/edit) (login with elastic user)
#Role name: logstash_write_role
#Cluster privileges: manage_index_templates,monitor,manage_ilm
#Indices: logstash* filebeat* syslog* (as a custom option)
#Privileges: create,write,delete,manage,create_index,manage_ilm
#click [Create Role]
#in web UI (https://selk.mydomain.com/app/management/security/users/create)
#or go to Stack Management, Users, and Create User
#Username: logstash_writer
#Password: bJqU9H6UT4
#Full name: null
#Email address: null
#Roles: logstash_write_role

sudo -u logstash /usr/share/logstash/bin/logstash --path.settings /etc/logstash -t
#Config Validation Result: OK. Exiting Logstash 
sudo chmod -R 755 /etc/filebeat/certs
sudo ufw allow in 5044
sudo systemctl start logstash
sudo systemctl enable logstash


=================================
Install Filebeat:
=================================

sudo apt -y install filebeat
#below, copy/paste the elastic password which was created above via elasticsearch-setup-passwords
sudo filebeat keystore create
sudo filebeat keystore add elastic_password
sudo nano /etc/filebeat/filebeat.yml
#setup.kibana:
output.elasticsearch:
  #we default to this disabled because we're using logstash output
  #but it can be enabled using: -E output.elasticsearch.enabled=true
  enabled: false
  # Array of hosts to connect to.
  hosts: ["selk.local:9200"]
  # Protocol - either `http` (default) or `https`.
  protocol: "https"
  # Authentication credentials - either API key or username/password.
  #api_key: "id:api_key"
  username: "elastic"
  password: "${elastic_password}"
  ssl.certificate_authorities: ["/etc/elasticsearch/certs/ca/ca.crt"]
output.logstash:
  # The Logstash hosts
  hosts: ["selk.mydomain.com:5044"]
  # Optional SSL. By default is off.
  # List of root certificates for HTTPS server verifications
  ssl.certificate_authorities: ["/etc/filebeat/certs/fullchain.pem"]
  # Certificate for SSL client authentication
  ssl.certificate: "/etc/filebeat/certs/cert.pem"
  # Client Certificate Key
  ssl.key: "/etc/filebeat/certs/privkey.pem"
sudo filebeat modules list
sudo filebeat modules enable system nginx mysql 
#elasticsearch o365
sudo filebeat setup -E output.elasticsearch.enabled=true -E output.logstash.enabled=false -E setup.kibana.host="http://selk.local:5601" --index-management
sudo filebeat setup -E output.elasticsearch.enabled=true -E output.logstash.enabled=false -E setup.kibana.host="http://selk.local:5601" --pipelines --modules system nginx mysql 
#elasticsearch o365
sudo filebeat setup -E output.elasticsearch.enabled=true -E output.logstash.enabled=false -E setup.kibana.host="http://selk.local:5601" --dashboards
#give the --dashboards command a minute to run
sudo filebeat -e test output
sudo filebeat -e test config
sudo systemctl start filebeat
sudo systemctl enable filebeat
curl -XGET 'https://selk.local:9200/filebeat-*/_search?pretty' --cacert /etc/filebeat/certs/ca/ca.crt --user elastic
sudo service filebeat status

sudo shutdown -h now

=================================
==BASE S.E.L.K.F. SYSTEM IS DONE=
=================================

Concluding Notes:
The iptables port redirect and the whole port 514->10514 and syslog config is still kind of experimental.
Anything unusual here is likely a workaround for things not working as documented.
